


block generateDocWebsite()
	copyAssetFolder()
	docDateLen = lengthOf(allAkoDocData)
	for a = 1 to docDateLen {
		createHtml(allAkoDocData[a])
	} 
	
block createHtml(akoDocData)
	_file = new File("./templates/"+templateName+"/sourcetemplete.html")
	content = _file.readFileAsString()
	
	__linkToFile = "" 
	__mainContent = "<p>"+formatHTMLComment(akoDocData[:prefix])+"</p><br />"
	splited = splitString(akoDocData[:htmlpath],'/')
	splitedLen = lengthOf(splited)
	for a = 0 to splitedLen - 1 {
		_____ = ((splitedLen - 1) - a)
		if _____ >= 2 {
			__linkToFile += '<a href="'+__copy("../", _____ - 1)+'">'+splited[a]+'</a>'
		else
			__linkToFile += '<a href="'+__copy(".", _____)+'/">'+splited[a]+'</a>'
		}
	}
	__linkToFile += '<a class="active" href="'+akoDocData[:htmlpath]+'">'+akoDocData[:title]+'</a>' 
	__sideBarNavigations = '<a href="#'+akoDocData[:title]+'" ><span class="ako-sidebar-heading">'+akoDocData[:title]+'</span></a><br />'
	#Blocks
	blocks = akoDocData[:blocks] #fix index after fix in simple-lang source
	outBlocksLen = lengthOf(blocks)
	for d = 0 to outBlocksLen {
		blockName = blocks[d][1]
		blockAbsoluteName = blocks[d][2]["abName"]
		blockComment = formatHTMLComment(blocks[d][2]["comment"])
		blockId = akoDocData[:name]+'.'+blockName
		__sideBarNavigations += '<a href="#'+blockId+'">&emsp;'+blockName+'()</a><br />'+nl
		__mainContent += '<div id="'+blockId+'" class="ako-block">
			<a href="#'+blockId+'" class="ako-block-title"> block '+blockAbsoluteName+'</a>
		<p>'+blockComment+'</p></div>'
	}
	
	#Classes
	classes = akoDocData[:classes] #fix index after fix in simple-lang source
	outClassesLen = lengthOf(classes)
	for d = 0 to outClassesLen {
		className = classes[d][1]
		classAbsoluteName = classes[d][2]["abName"]
		classComment = formatHTMLComment(classes[d][2]["comment"])
		classId = akoDocData[:name]+'.'+className
		__sideBarNavigations += '<a href="#'+classId+'" >&emsp;'+className+'</a><br />'+nl
		__mainContent += '<h1 id="'+classId+'">'+classAbsoluteName+'</h1>
				<p>'+classComment+'</p>'
			
		blocks = classes[d][2][:blocks] #fix index after fix in simple-lang source
		outBlocksLen = lengthOf(blocks)
		for e = 0 to outBlocksLen {
			blockName = blocks[e][1]
			blockAbsoluteName = blocks[e][2]["abName"]
			blockComment = formatHTMLComment(blocks[e][2]["comment"])
			blockId = akoDocData[:name]+'.'+blockName
			__sideBarNavigations += '<a href="#'+blockId+'" >&emsp;'+blockName+'()</a><br />'+nl
			__mainContent += '<div id="'+blockId+'" class="ako-block">
				<a href="#'+blockId+'" class="ako-block-title"> block '+blockAbsoluteName+'</a>
			<p>'+blockComment+'</p></div>'
		}
	}
	
	#MODULES
	modules = akoDocData[:modules] #fix index after fix in simple-lang source
	outModulesLen = lengthOf(modules)
	for d = 0 to outModulesLen {
		moduleName = modules[d][1]
		classes = modules[d][2]["classes"]
		blocks = modules[d][2]["blocks"]
		if isString(moduleName) { 
			moduleComment = formatHTMLComment(modules[d][2]["comment"])
			moduleId = akoDocData[:name]+'.'+moduleName
			__sideBarNavigations += '<a href="#'+moduleId+'" >&emsp;'+moduleName+'</a><br />'+nl
			__mainContent += '<h1 id="'+moduleId+'">'+moduleName+'</h1>
					<p>'+moduleComment+'</p>'
		}
		
		#MODULES BLOCKS
		outBlocksLen = lengthOf(blocks)
		if outBlocksLen >= 0 {
			for e = 0 to outBlocksLen {
				blockName = blocks[e][1]
				blockAbsoluteName = blocks[e][2]["abName"]
				blockComment = formatHTMLComment(blocks[e][2]["comment"])
				blockId = akoDocData[:name]+'.'+blockName
				__sideBarNavigations += '<a href="#'+blockId+'">&emsp;'+blockName+'()</a><br />'+nl
				__mainContent += '<div id="'+blockId+'" class="ako-block">
					<a href="#'+blockId+'" class="ako-block-title"> block '+blockAbsoluteName+'</a>
				<p>'+blockComment+'</p></div>'
			}
		}
		
		#MODULES CLASSES
		outClassesLen = lengthOf(classes) #fix index after fix in simple-lang source
		if outClassesLen >= 0 {
			for f = 0 to outClassesLen {
				className = classes[f][1]
				classAbsoluteName = classes[f][2]["abName"]
				classComment = formatHTMLComment(classes[f][2]["comment"])
				classId = moduleName+'.'+className
				__sideBarNavigations += '<a href="'+akoDocData[:htmlname]+'#'+className+'" >&emsp;'+className+'</a><br />'+nl
				__mainContent += '<h1 id="'+classId+'">'+classAbsoluteName+'</h1>
					<p>'+classComment+'</p>'
				
				blocks = classes[f][2][:blocks] #fix index after fix in simple-lang source
				outBlocksLen = lengthOf(blocks)
				for e = 0 to outBlocksLen {
					blockName = blocks[e][1]
					blockAbsoluteName = blocks[e][2]["abName"]
					blockComment = formatHTMLComment(blocks[e][2]["comment"])
					blockId = akoDocData[:name]+'.'+blockName
					__sideBarNavigations += '<a href="#'+blockId+'" >&emsp;'+blockName+'()</a><br />'+nl
					__mainContent += '<div id="'+blockId+'" class="ako-block">
						<a href="#'+blockId+'" class="ako-block-title"> block '+blockAbsoluteName+'</a>
					<p>'+blockComment+'</p></div>'
				}
			}
		}
		
	}
	__mainContent += "<br /><p>"+formatHTMLComment(akoDocData[:suffix])+"</p><br />"
	
	content = replaceString(content,"{{title}}",akoDocData[:title])
	content = replaceString(content,"{{assets-folder}}",getRelativeLink(akoDocData[:htmlpath])+"assets")
	content = replaceString(content,"{{links-to-current-file}}",__linkToFile)
	content = replaceString(content,"{{current-file-id-link}}",akoDocData[:title])
	content = replaceString(content,"{{block-in-current-file-ids}}",__sideBarNavigations)
	content = replaceString(content,"{{main-contents}}",__mainContent)
	content = replaceString(content,"{{author}}",akoDocData[:author])
	content = replaceString(content,"{{date}}",akoDocData[:date])
	content = replaceString(content,"{{time}}",akoDocData[:time])
	content = replaceString(content,"{{license}}",akoDocData[:license])
	
	htmlFile = new File(akoDestDir+akoDocData[:htmlpath])
	htmlFile.write(content)
	
block copyAssetFolder()
	dir = new Directory("./templates/"+templateName+"/assets/")
	if dir.exists() {
		#dir.copyTo(akoDestDir) #to copy to main dest dir
	else
		throw("the selected template "+templateName+" does not exists")
	}