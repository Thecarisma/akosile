

block akoParseSimple(sourceFile,type,currentDir)
	printAkoMessage("parsing : "+removeString(sourceFile.absolutePath(),currentDir),DISPLAY_TYPE_MESSAGE)
	pureName = removeString(sourceFile.name(),type)
	fsl = removeString(sourceFile.absolutePath(),currentDir)
	fileSourceLink =  removeString(fsl,type)+".html" #allAkoDocLinks["currentDir"]+
	allAkoDocLinks[pureName] = fileSourceLink
	currentSourceData = []
	dateTime = new DateTime(null)
	
	vmb = variableMap["Block"]
	if isList(vmb) and lengthOf(vmb) < 0 {
		variableMap["Block"] = []
	}
	vmb = variableMap["Class"]
	if isList(vmb) and lengthOf(vmb) < 0 {
		variableMap["Class"] = []
	}
	vmb = variableMap["Module"]
	if isList(vmb) and lengthOf(vmb) < 0 {
		variableMap["Module"] = []
	}
	
	currentSourceData["modules"] = []
	currentSourceData["blocks"] = []
	currentSourceData["classes"] = []
	currentSourceData["htmlpath"] = replaceString(fileSourceLink,'\','/')
	currentSourceData["title"] = sourceFile.name()
	currentSourceData["name"] = pureName
	currentSourceData["htmlname"] = pureName+".html"
	currentSourceData["author"] = akoDocAuthor
	currentSourceData["date"] = akoDocDate
	currentSourceData["time"] = akoDocTime
	currentSourceData["license"] = akoDocLicense
	currentSourceData["prefix"] = null
	currentSourceData["suffix"] = null
	
	tempModule = [] 
	tempModule["classes"] = []
	tempModule["blocks"] = []
	tempClass = []
	tempClass["blocks"] = []
	tempBlock = []
	
	hasModule = false
	hasClass = false
	currentModuleValue = null
	currentClassName = null
	currentComment = ""
	lineNumber = 0

	source = sourceFile.readFileAsString()	+ " "
	TOKEN_UNUSED =  0 TOKEN_MULTILINE_COMMENT = 1 
	TOKEN_TYPE = TOKEN_UNUSED
	sourceLen = lengthOf(source)
	for i = 0 to sourceLen {
		if i == sourceLen {  break }
		switch TOKEN_TYPE {
			case TOKEN_UNUSED 
				if source[i] = cr or source[i] = nl or source[i] = crlf { lineNumber++ }
				if source[i] == '/' and source[i+1] == '*' i++ currentComment = "" TOKEN_TYPE = TOKEN_MULTILINE_COMMENT
				elif source[i] == "#" and source[i+1] != '"'
					while source[i+1] != cr and source[i+1] != nl and source[i+1] != crlf {
						i++
					} lineNumber++
				elif source[i] == '"' i++ while source[i] != '"' { i++ } 
				elif source[i] == "'" i++ while source[i] != "'" { i++ } 
				else
					if (sourceLen - i) > 5 {
						if (source[i]+source[i+1]+source[i+2]+source[i+3]+source[i+4]+source[i+5]) == "module" and isWhiteSpace(source[i+6]) {
							moduleName = ""
							i++ i++ i++ i++ i++ i++
							while isWhiteSpace(source[i]) { i++ }
							while isAlphaNum(source[i]) or source[i] == "." {
								moduleName += source[i] i++
							} 
							tempModule["comment"] = currentComment currentComment = ""
							tempModule["id"] = moduleName
							currentModuleValue = moduleName
							currentSourceData["modules"][currentModuleValue] = tempModule
							variableMap["Module"][moduleName] = "./"+currentSourceData["htmlpath"]+"#"+tempModule["id"]
							if !hasModule { hasModule = true } hasClass = false 
						} 
					}
					if (sourceLen - i) > 4 {
						if (source[i]+source[i+1]+source[i+2]+source[i+3]+source[i+4]) == "class" and isWhiteSpace(source[i+5]){
							className = "" abClassName = ""
							i++ i++ i++ i++ i++ 
							while isWhiteSpace(source[i]) { i++ }
							while isAlphaNum(source[i]) or source[i] == "." {
								className += source[i] abClassName += source[i]
								i++
							} 
							
							while source[i] != cr and source[i] != nl and source[i] != crlf and i <= sourceLen {
								abClassName += source[i] 
								i++
							} lineNumber++
							tempClass["comment"] = currentComment currentComment = ""
							tempClass["abName"] = abClassName
							currentClassName = className
							if hasModule {
								tempClass["id"] = currentModuleValue+"."+className
								currentSourceData["modules"][currentModuleValue]["classes"][currentClassName] = tempClass
							else
								tempClass["id"] = className
								currentSourceData["classes"][currentClassName] = tempClass
							}
							variableMap["Class"][className] = "./"+currentSourceData["htmlpath"]+"#"+tempClass["id"]
							if !hasClass { hasClass = true }
						elif (source[i]+source[i+1]+source[i+2]+source[i+3]+source[i+4]) == "block" and isWhiteSpace(source[i+5])
							blockName = "" abBlockName = ""
							i++ i++ i++ i++ i++ 
							while isWhiteSpace(source[i]) { i++ }
							while isAlphaNum(source[i]) or source[i] == "." or source[i] == "_" or source[i] == "$" {
								blockName += source[i] abBlockName += source[i] i++
							} 
							while isAlphaNum(source[i]) or isPunctuation(source[i]) {
								if source[i] == ')' {
									abBlockName += source[i] i++ break
								elif isWhiteSpace(source[i+1])
									abBlockName += source[i]+" " i++ i++
								else
									abBlockName += source[i] i++ 
								}
							}
							tempBlock["comment"] = currentComment currentComment = ""
							tempBlock["abName"] = abBlockName
							if hasModule {
								if hasClass {
									tempBlock["id"] = currentModuleValue+"."+currentClassName+"."+blockName
									currentSourceData["modules"][currentModuleValue]["classes"][currentClassName]["blocks"][blockName] = tempBlock 
								else
									tempBlock["id"] = currentModuleValue+"."+blockName
									currentSourceData["modules"][currentModuleValue]["blocks"][blockName] = tempBlock
								}
							elif hasClass
								tempBlock["id"] = currentClassName+"."+blockName
								currentSourceData["classes"][currentClassName]["blocks"][blockName] = tempBlock 
							else
								tempBlock["id"] = blockName
								currentSourceData["blocks"][blockName] = tempBlock
							}
							variableMap["Block"][abBlockName] = "./"+currentSourceData["htmlpath"]+"#"+tempBlock["id"]
							tempBlock = []
						}
					}
				end
			case TOKEN_MULTILINE_COMMENT
				if source[i] == '*' and source[i+1] == '/' and (source[i+2] != '"' or source[i+2] != "'") {
					TOKEN_TYPE = TOKEN_UNUSED
				elif source[i] == cr or source[i] == nl or source[i] == crlf
					while isWhiteSpace(source[i]+source[i+1]) {
						i++
					} currentComment += nl lineNumber++
				else
					if (sourceLen - i) > 5 {
						varToken = toLowerCase(source[i]+source[i+1])
						token = toLowerCase(varToken+source[i+2]+source[i+3])
						if varToken == "$$" {
							i = absorbTillWhiteSpace(source,i,"$$")
							var = ""
							while !isWhiteSpace(source[i]) {
								var += source[i] i++
							}
							vv = variableMap[var]
							if vv == null {
								printAkoMessage("the variable '"+var+"' is not define at line "+lineNumber+" in "+sourceFile.getName(),DISPLAY_TYPE_WARNING)
								currentComment += "$$"+var
							else
								if stringStartsWith(vv,"http") or stringStartsWith(vv,"./") or stringStartsWith(vv,"../") or stringStartsWith(vv,"#") {
									currentComment += '<a href="'+vv+'">'+var+'</a>'
								else 
									currentComment += vv
								}
							}
							
						}
						if token == "@pre" {
							i = absorbTillWhiteSpace(source,i,"@prefix")
							while (source[i] + source[i+1]) != '*/' {
								currentSourceData["prefix"] += source[i] i++ 
							} i-- i--
						elif token == "@suf"
							i = absorbTillWhiteSpace(source,i,"@suffix")
							while (source[i] + source[i+1]) != '*/' {
								currentSourceData["suffix"] += source[i] i++ 
							} i-- i--
						}
					}
					currentComment += source[i] 
				}
		}
	} 
	add(tempModule["classes"],tempClass) 
	add(currentSourceData["modules"],tempModule) 
	allAkoDocData + currentSourceData