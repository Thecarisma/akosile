
call "simple/io/File.sim"
call "simple/core/List.sim"
call "simple/utilities/Type.sim"

position = 0
source = ""

block sourcePosition()
	if position > lengthOf(source) {
		return lengthOf(source)
	else
		return position
	}

block parseAkoFile(file)
	printAkoMessage("preparing to parse map.ako file",1)
	if startAkoParsing(file) {
		return true
	else
		return false
	}
	return false
	
block startAkoParsing(sourceFile)
	SCANNER_IDENTIFIER = 0 SCANNER_COMMENT = 1 SCANNER_CLASS = 2
	SCANNER_TYPE = SCANNER_IDENTIFIER
	source = sourceFile.readFileAsString()
	sourceFileName = sourceFile.name()
	sourceLen = lengthOf(source)
	sourceCurrentLine = 1
	currentClass = []
	currentClassName = "__Main"
	for a = 0 to sourceLen {
		val = source[a]
		switch SCANNER_TYPE {
			case SCANNER_IDENTIFIER
				if val == "[" {
					valVar = ""
					while source[a+1] != "]" and (a+1) < sourceLen {
						valVar += source[a++]
						if !isAlphaNum(source[a]) {
							throwAkoError("Invalid identifier '"+source[a]+"' near '"+valVar+"'",sourceCurrentLine,sourceFileName)
						}
					}
					a++ a++
					while isWhiteSpace(source[a++]) {}
					if source[a] == "(" or source[a] == '"' or source[a] == "'" {
						switch source[a] {
							case '(' litTemp = ')'
							case '"' litTemp = '"'
							case "'" litTemp = "'"
						}
						valVal = ""
						while source[a+1] != litTemp and (a+1) < sourceLen {
							valVal += source[a++]
							if !isAlphaNum(source[a]) and !isPunctuation(source[a]) and !isWhiteSpace(source[a]) {
								throwAkoError("Invalid identifier '"+source[a]+"' near '"+valVal+"'",sourceCurrentLine,sourceFileName)
							}
						}
					variableMap[valVar] = valVal
					elif source[a] == "{" 
						varClass = []
						currentClass = varClass
						currentClassName = valVar
						SCANNER_TYPE = SCANNER_CLASS
						continue
					}
				elif source[a] == '/' and source[a+1] == '*' a++ SCANNER_TYPE = SCANNER_COMMENT
				elif val == nl or val == crlf sourceCurrentLine++
				}
			case SCANNER_CLASS
				while isWhiteSpace(source[a]) and (a+1) < sourceLen { a++ }
				if source[a] == "}" {
					a++
					SCANNER_TYPE = SCANNER_IDENTIFIER
					variableMap[currentClassName] = currentClass
					continue
				}
				if source[a] == "[" {
					valVar = ""
					while source[a+1] != "]" and (a+1) < sourceLen {
						valVar += source[a++]
						if !isAlphaNum(source[a]) {
							throwAkoError("Invalid identifier '"+source[a]+"' near '"+valVar+"'",sourceCurrentLine,sourceFileName)
						}
					}
					a++ a++
					while isWhiteSpace(source[a+1]) { a++ }
					if source[a] == "(" or source[a] == '"' or source[a] == "'" {
						switch source[a] {
							case '(' litTemp = ')'
							case '"' litTemp = '"'
							case "'" litTemp = "'"
						}
						valVal = ""
						while source[a+1] != litTemp and (a+1) < sourceLen {
							valVal += source[a++]
							if !isAlphaNum(source[a]) and !isPunctuation(source[a]) and !isWhiteSpace(source[a]) {
								throwAkoError("Invalid identifier '"+source[a]+"' near '"+valVal+"'",sourceCurrentLine,sourceFileName)
							}
						}
					currentClass[valVar] = valVal
					}
				}
				
		}
	}
	return true
	
class AkoToken
	
	type location value variable location
	
	block AkoToken(variable,value,location,type)
		this.type = type
		this.variable = variable
		this.value =  value
		this.location = location
	
	