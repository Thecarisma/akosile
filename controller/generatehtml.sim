

akoIndexexList = []


block generateDocWebsite()
	copyAssetFolder()
	docDateLen = lengthOf(allAkoDocData)
	printAkoMessage("generating documentation website at "+akoDestDir,DISPLAY_TYPE_INFO)
	for a = 1 to docDateLen {
		if lengthOf(akoIndexexList[allAkoDocData[a][:htmlparentpath]]) < 0 {
			akoIndexexList[allAkoDocData[a][:htmlparentpath]] = []
			akoIndexexList[allAkoDocData[a][:htmlparentpath]]["modules"] = []
			akoIndexexList[allAkoDocData[a][:htmlparentpath]]["classes"] = []
			akoIndexexList[allAkoDocData[a][:htmlparentpath]]["blocks"] = []
			akoIndexexList[allAkoDocData[a][:htmlparentpath]]["files"] = []
		}
		createHtml(allAkoDocData[a])
	}
	if generateIndexes {
		printAkoMessage("generating documentation index webpages... ",DISPLAY_TYPE_INFO)
		printAkoMessage("index generation can take some time to analyse and complete",DISPLAY_TYPE_WARNING)
		generateIndexPage(akoDestDir)
	else
		printAkoMessage("index webpages generation disable for this documentation ",DISPLAY_TYPE_MESSAGE)
	}
	
	
block generateIndexPage(directory)
	akoDestDir = replaceString(akoDestDir,'\','/')
	akilLen = lengthOf(akoIndexexList)
	for a = 0 to akilLen {
		printAkoMessage("generating doc summary webpage for : ./"+removeString(akoIndexexList[a][1],akoDestDir),DISPLAY_TYPE_INFO)
		_file = new File(templateFolder+templateName+"/docsummarytemplate.html")
		content = _file.readFileAsString()
		htmlpath = akoIndexexList[a][1]+"index.html"
		if __exists(htmlpath) {
			if indexAsSummary {
				printAkoMessage("deleting index.html to be replace by docsummary for ./"+removeString(akoIndexexList[a][1],akoDestDir),DISPLAY_TYPE_WARNING)
				__delete(htmlpath)
			else
				htmlpath = akoIndexexList[a][1]+"docsummary.html"
			}
		}
		htmlFile = new File(htmlpath) dir = new Directory(htmlFile.directory())
		
		__linkToFile = '<a href="#"><button class="mat-menu-item active" tabindex="0" aria-disabled="false"> '+dir.name()+' </button></a>  ' 
		
		#modules
		__modules = '<div class="block-quote block-quote-info bg-green-alpha" id="Modules"> <h2 > Modules </h2> </div><table>'
		indexModules = akoIndexexList[a][2][:modules]
		modLen = lengthOf(indexModules)
		if modLen < 0 { __modules = "" }
		for b = 0 to modLen {
			name = indexModules[b][1]
			link = lastStringAfterChar(indexModules[b][2],'/')
			comment = ""
			__modules += '<tr> <td><a href="'+link+'" class="index-link">&emsp;&emsp; '+name+' &nbsp;&nbsp;</a></td> <td>'+comment+'</td> </tr> '
		}
		__modules += '</table>'
		
		#classes
		__classes = '<div class="block-quote block-quote-info bg-green-alpha" id="Modules"> <h2 > Classes </h2> </div><table>'
		indexClasses = akoIndexexList[a][2][:classes] 
		claLen = lengthOf(indexClasses)
		if claLen < 0 { __classes = "" }
		for b = 0 to claLen {
			name = indexClasses[b][1]
			link = lastStringAfterChar(indexClasses[b][2],'/')
			comment = ""
			__classes += '<tr> <td><a href="'+link+'" class="index-link">&emsp;&emsp; '+name+' &nbsp;&nbsp;</a></td> <td>'+comment+'</td> </tr> '
		}
		__classes += '</table>'
		
		#blocks
		__blocks = '<div class="block-quote block-quote-info bg-green-alpha" id="Modules"> <h2 > Blocks </h2>  </div>'
		indexBlocks = akoIndexexList[a][2][:blocks] 
		bloLen = lengthOf(indexBlocks)
		if bloLen < 0 { __blocks = "" }
		for b = 0 to bloLen {
			name = indexBlocks[b][1]
			link = lastStringAfterChar(indexBlocks[b][2],'/')
			__blocks += '<a href="'+link+'" class="index-link">&emsp;&emsp; '+name+' &nbsp;&nbsp;</a><br />'
		}
		
		#files
		__files = '<div class="block-quote block-quote-info bg-green-alpha" id="Modules"> <h2 > Files </h2> </div>'
		indexFiles = akoIndexexList[a][2][:files] 
		filLen = lengthOf(indexFiles)
		if filLen < 0 { __files = "" }
		for b = 0 to filLen {
			name = indexFiles[b][1]
			link = lastStringAfterChar(indexFiles[b][2],'/')
			__files += '<a href="'+link+'" class="index-link">&emsp;&emsp; '+name+' &nbsp;&nbsp;</a><br />'
		}
		
		secMenu = variableMap["SecondaryMenu"]
		__secondaryMenu = ""
		if isList(secMenu) {
			splited = splitString(htmlpath,'/')
			splitedLen = lengthOf(splited)
			secMenuLen = lengthOf(secMenu)
			for i = 0 to secMenuLen {
				__menu = secMenu[i] 
				if splitedLen > 1 {
					tu = __copy(".", ((splitedLen - 1) - 0))+"/../"
				else 
					tu = __copy(".", ((splitedLen - 0) - 0))+"/"
				}
				url = replaceString(__menu[1],"doc-index",tu)
				__secondaryMenu += '<a href="'+url+'"><button class="mat-menu-item" tabindex="0" aria-disabled="false"> '+__menu[0]+' </button></a>'
			}
		}
		
		content = replaceString(content,"{{modules-list}}",__modules)
		content = replaceString(content,"{{classes-list}}",__classes)
		content = replaceString(content,"{{blocks-list}}",__blocks)
		content = replaceString(content,"{{files-list}}",__files)
		content = replaceString(content,"{{secondary-menu}}",__secondaryMenu) 
		content = replaceString(content,"{{assets-folder}}",getRelativeLink(removeString(htmlpath,akoDestDir))+"assets")
		content = replaceString(content,"{{title}}","index of "+dir.name()+" - "+mainTitle)
	content = replaceString(content,"{{links-to-current-file}}",__linkToFile)
		htmlFile.write(content)
	}
	
block createHtml(akoDocData)
	akoIndexexList[akoDocData[:htmlparentpath]]["files"][akoDocData[:name]] = akoDocData[:htmlpath]
	_file = new File(templateFolder+templateName+"/sourcetemplate.html")
	content = _file.readFileAsString()
	printAkoMessage("generating webpage at : "+akoDocData[:htmlpath],DISPLAY_TYPE_MESSAGE)
	
	__linkToFile = "" 
	__mainContent = "<p>"+formatHTMLComment(akoDocData[:prefix],getRelativeLink(akoDocData[:htmlpath]))+"</p><br />"
	splited = splitString(akoDocData[:htmlpath],'/')
	splitedLen = lengthOf(splited)
	for a = 0 to splitedLen - 1 {
		_____ = ((splitedLen - 1) - a)
		if _____ >= 2 {
			__linkToFile += '<a href="'+__copy("../", _____ - 1)+'"><button class="mat-menu-item" tabindex="0" aria-disabled="false"> '+splited[a]+' </button></a>'
		else
			__linkToFile += '<a href="'+__copy(".", _____)+'"><button class="mat-menu-item" tabindex="0" aria-disabled="false"> '+splited[a]+' </button></a>'
		}
	}
	__linkToFile += '<a href="#"><button class="mat-menu-item active" tabindex="0" aria-disabled="false"> '+akoDocData[:title]+' </button></a>  '
	
	__sideBarNavigations = '<div _ngcontent-bxo-47=""> <a href="#"><span _ngcontent-bxo-47="" class="selected-content menu-title pointer"> '+akoDocData[:title]+' </span></a> </div>'
	
	#Blocks
	blocks = akoDocData[:blocks] #fix index after fix in simple-lang source
	outBlocksLen = lengthOf(blocks)
	for d = 0 to outBlocksLen {
		blockName = blocks[d][1]
		blockAbsoluteName = blocks[d][2]["abName"]
		blockComment = formatHTMLComment(blocks[d][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
		blockId = blocks[d][2]["id"]
		__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
				<span _ngcontent-bxo-47="" class="pointer">  
				<a href="#'+blockId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+blockName+'()
				</span></a> </span> </div>' + nl
				
		__mainContent += '<div id="'+blockId+'" class="ako-block">
			<div class="block-quote block-quote-info bg-green-alpha blockquote-padding-left" > 
				<span style="font-size:20px;font-weight:800px;"> block '+blockAbsoluteName+'</span> </div>
					<p>'+blockComment+'</p></div>'
					
		akoIndexexList[akoDocData[:htmlparentpath]]["blocks"][blockAbsoluteName] = akoDocData[:htmlpath]+"#"+blockId
	}
	
	#Classes
	classes = akoDocData[:classes] #fix index after fix in simple-lang source
	outClassesLen = lengthOf(classes)
	for d = 0 to outClassesLen {
		className = classes[d][1]
		classAbsoluteName = classes[d][2]["abName"]
		classComment = formatHTMLComment(classes[d][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
		classId = classes[d][2]["id"]
		__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
				<span _ngcontent-bxo-47="" class="pointer selected-elem">  
				<a href="#'+classId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+className+'
				</span></a> </span> </div>' + nl
		
		__mainContent += '<h1 id="'+classId+'">'+classAbsoluteName+'</h1>
				<p>'+classComment+'</p>'
				
		akoIndexexList[akoDocData[:htmlparentpath]]["classes"][classAbsoluteName] = akoDocData[:htmlpath]+"#"+classId
			
		blocks = classes[d][2][:blocks] #fix index after fix in simple-lang source
		outBlocksLen = lengthOf(blocks)
		for e = 0 to outBlocksLen {
			blockName = blocks[e][1]
			blockAbsoluteName = blocks[e][2]["abName"]
			blockComment = formatHTMLComment(blocks[e][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
			blockId = blocks[e][2]["id"]
			__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
				<span _ngcontent-bxo-47="" class="pointer">  
				<a href="#'+blockId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+blockName+'()
				</span></a> </span> </div>' + nl
				
			__mainContent += '<div id="'+blockId+'" class="ako-block">
				<div class="block-quote block-quote-info bg-green-alpha blockquote-padding-left" > 
					<span style="font-size:20px;font-weight:800px;"> block '+blockAbsoluteName+'</span> </div>
						<p>'+blockComment+'</p></div>'
						
			akoIndexexList[akoDocData[:htmlparentpath]]["blocks"][blockAbsoluteName] = akoDocData[:htmlpath]+"#"+blockId
		}
	}
	
	#MODULES
	modules = akoDocData[:modules] #fix index after fix in simple-lang source
	outModulesLen = lengthOf(modules)
	for d = 0 to outModulesLen {
		moduleName = modules[d][1]
		classes = modules[d][2]["classes"]
		blocks = modules[d][2]["blocks"]
		if isString(moduleName) { 
			moduleComment = formatHTMLComment(modules[d][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
			moduleId = modules[d][2]["id"]
			__sideBarNavigations += '<div _ngcontent-bxo-47=""><span _ngcontent-bxo-47="" class="back-button-hidden"></span> </div>
			<div _ngcontent-bxo-47=""> <a href="#'+moduleId+'"><span _ngcontent-bxo-47="" class="selected-content menu-title pointer"> '+moduleName+' </span></a> </div>'
				
			__mainContent += '<h1 id="'+moduleId+'">'+moduleName+'</h1>
					<p>'+moduleComment+'</p>'
					
			akoIndexexList[akoDocData[:htmlparentpath]]["modules"][moduleName] = akoDocData[:htmlpath]+"#"+moduleId
		}
		
		#MODULES BLOCKS
		outBlocksLen = lengthOf(blocks)
		if outBlocksLen >= 0 {
			for e = 0 to outBlocksLen {
				blockName = blocks[e][1]
				blockAbsoluteName = blocks[e][2]["abName"]
				blockComment = formatHTMLComment(blocks[e][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
				blockId = blocks[e][2]["id"]
				__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
					<span _ngcontent-bxo-47="" class="pointer">  
						<a href="#'+blockId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+blockName+'()
							</span></a> </span> </div>' + nl
				
				__mainContent += '<div id="'+blockId+'" class="ako-block">
					<div class="block-quote block-quote-info bg-green-alpha blockquote-padding-left" > 
						<span style="font-size:20px;font-weight:800px;"> block '+blockAbsoluteName+'</span> </div>
							<p>'+blockComment+'</p></div>'
							
				akoIndexexList[akoDocData[:htmlparentpath]]["blocks"][blockAbsoluteName] = akoDocData[:htmlpath]+"#"+blockId
			}
		}
		
		#MODULES CLASSES
		outClassesLen = lengthOf(classes) #fix index after fix in simple-lang source
		if outClassesLen >= 0 {
			for f = 0 to outClassesLen {
				className = classes[f][1]
				classAbsoluteName = classes[f][2]["abName"]
				classComment = formatHTMLComment(classes[f][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
				classId = classes[f][2]["id"]
				__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
					<span _ngcontent-bxo-47="" class="pointer selected-elem">  
						<a href="#'+classId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+className+'
						</span></a> </span> </div>' + nl
				
				__mainContent += '<h1 id="'+classId+'">'+classAbsoluteName+'</h1>
					<p>'+classComment+'</p>'
					
				akoIndexexList[akoDocData[:htmlparentpath]]["classes"][classAbsoluteName] = akoDocData[:htmlpath]+"#"+classId
				
				blocks = classes[f][2][:blocks] #fix index after fix in simple-lang source
				outBlocksLen = lengthOf(blocks)
				for e = 0 to outBlocksLen {
					blockName = blocks[e][1]
					blockAbsoluteName = blocks[e][2]["abName"]
					blockComment = formatHTMLComment(blocks[e][2]["comment"],getRelativeLink(akoDocData[:htmlpath]))
					blockId = blocks[e][2]["id"]
					__sideBarNavigations += '<div _ngcontent-bxo-47="" class="mt30"> 
						<span _ngcontent-bxo-47="" class="pointer">  
							<a href="#'+blockId+'"><span _ngcontent-bxo-47="" class="selected-content"> '+blockName+'()
								</span></a> </span> </div>' + nl
								
					__mainContent += '<div id="'+blockId+'" class="ako-block">
						<div class="block-quote block-quote-info bg-green-alpha blockquote-padding-left" > 
							<span style="font-size:20px;font-weight:800px;"> block '+blockAbsoluteName+'</span> </div>
								<p>'+blockComment+'</p></div>'
								
					akoIndexexList[akoDocData[:htmlparentpath]]["blocks"][blockAbsoluteName] = akoDocData[:htmlpath]+"#"+blockId
				}
			}
		}
		
	}
	__mainContent += "<br /><p>"+formatHTMLComment(akoDocData[:suffix],getRelativeLink(akoDocData[:htmlpath]))+"</p><br />"
	
	secMenu = variableMap["SecondaryMenu"]
	__secondaryMenu = ""
	if isList(secMenu) {
		secMenuLen = lengthOf(secMenu)
		for i = 0 to secMenuLen {
			__menu = secMenu[i] 
			if splitedLen > 1 {
				tu = __copy(".", ((splitedLen - 1) - 0))+"/../"
			else 
				tu = __copy(".", ((splitedLen - 0) - 0))+"/"
			}
			url = replaceString(__menu[1],"doc-index",tu)
			__secondaryMenu += '<a href="'+url+'"><button class="mat-menu-item" tabindex="0" aria-disabled="false"> '+__menu[0]+' </button></a>'
		}
	}
	#
	content = replaceString(content,"{{title}}",akoDocData[:title]+" - "+mainTitle)
	content = replaceString(content,"{{assets-folder}}",getRelativeLink(akoDocData[:htmlpath])+"assets")
	content = replaceString(content,"{{links-to-current-file}}",__linkToFile)
	content = replaceString(content,"{{current-file-id-link}}",akoDocData[:title])
	content = replaceString(content,"{{block-in-current-file-ids}}",__sideBarNavigations)
	content = replaceString(content,"{{main-contents}}",__mainContent)
	content = replaceString(content,"{{author}}",akoDocData[:author])
	content = replaceString(content,"{{date}}",akoDocData[:date])
	content = replaceString(content,"{{time}}",akoDocData[:time])
	content = replaceString(content,"{{license}}",akoDocData[:license])
	content = replaceString(content,"{{secondary-menu}}",__secondaryMenu)
	
	htmlFile = new File(akoDestDir+akoDocData[:htmlpath])
	htmlFile.write(content)
	
block copyAssetFolder()
	dir = new Directory(templateFolder+templateName+"/assets/")
	if dir.exists() {
		#dir.copyTo(akoDestDir) #to copy to main dest dir
	else
		throw("the selected template "+templateName+" does not exists")
	}